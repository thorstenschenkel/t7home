// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   SmartHomeEntitiesXMLResponse.java

package org.openhab.binding.rwesmarthome.internal.lib.api;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.SmartHomeLocation;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.TemperatureHumidityDevice;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.AlarmActuator;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.DaySensor;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.DimmerActuator;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.EmailActuator;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.GenericActuator;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.GenericSensor;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.LogicalDevice;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.LuminanceSensor;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.MotionDetectionSensor;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.PushButtonSensor;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.RollerShutterActuator;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.RoomHumiditySensor;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.RoomTemperatureActuator;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.RoomTemperatureSensor;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.Router;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.SmokeDetectorSensor;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.SmsActuator;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.SwitchActuator;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.SwitchDefaultOffSettings;
import org.openhab.binding.rwesmarthome.internal.lib.api.entities.devices.WindowDoorSensor;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

// Referenced classes of package org.openhab.binding.rwesmarthome.internal.lib.api:
//            XMLResponse, LogicalDeviceXMLResponse

public class SmartHomeEntitiesXMLResponse extends XMLResponse
{

    public ConcurrentHashMap getLocations()
    {
        return locations;
    }

    public ConcurrentHashMap getSwitchActuators()
    {
        return switchActuators;
    }

    public ConcurrentHashMap getDimmerActuators()
    {
        return dimmerActuators;
    }

    public SmartHomeEntitiesXMLResponse(InputStream is)
    {
        responseStatus = "";
        locations = null;
        pushButtonSensors = null;
        routers = null;
        switchActuators = null;
        dimmerActuators = null;
        rollerShutterActuators = null;
        alarmActuators = null;
        baseActuators = null;
        baseSensors = null;
        roomTemperatureSensors = null;
        smokeDetectorSensors = null;
        roomHumiditySensors = null;
        roomTemperatureActuators = null;
        temperatureHumidityDevices = null;
        windowDoorSensors = null;
        mapRoomsToTemperatureActuators = null;
        mapRoomsToTemperatureSensors = null;
        mapRoomsToHumiditySensors = null;
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        try
        {
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document dom = db.parse(is);
            Element docEle = dom.getDocumentElement();
            NodeList nlLocations = docEle.getElementsByTagName("LC");
            locations = new ConcurrentHashMap(5);
            if(nlLocations != null && nlLocations.getLength() > 0)
            {
                for(int i = 0; i < nlLocations.getLength(); i++)
                {
                    Element locEl = (Element)nlLocations.item(i);
                    SmartHomeLocation shl = getLocation(locEl);
                    locations.put(shl.getLocationId(), shl);
                }

            }
            NodeList nlLogicalDevices = docEle.getElementsByTagName("LD");
            pushButtonSensors = new ConcurrentHashMap();
            routers = new ConcurrentHashMap();
            switchActuators = new ConcurrentHashMap();
            dimmerActuators = new ConcurrentHashMap();
            rollerShutterActuators = new ConcurrentHashMap();
            alarmActuators = new ConcurrentHashMap();
            baseActuators = new ConcurrentHashMap();
            baseSensors = new ConcurrentHashMap();
            roomTemperatureActuators = new ConcurrentHashMap();
            roomHumiditySensors = new ConcurrentHashMap();
            roomTemperatureSensors = new ConcurrentHashMap();
            smokeDetectorSensors = new ConcurrentHashMap();
            temperatureHumidityDevices = new ConcurrentHashMap();
            windowDoorSensors = new ConcurrentHashMap();
            mapRoomsToTemperatureActuators = new ConcurrentHashMap();
            mapRoomsToHumiditySensors = new ConcurrentHashMap();
            mapRoomsToTemperatureSensors = new ConcurrentHashMap();
            if(nlLogicalDevices != null && nlLogicalDevices.getLength() > 0)
            {
                for(int i = 0; i < nlLogicalDevices.getLength(); i++)
                {
                    Element logDevEl = (Element)nlLogicalDevices.item(i);
                    LogicalDevice logDev = getLogicalDevice(logDevEl);
                    if(logDev != null)
                    {
                        if(!logDev.getDeviceName().equals(""))
                            Logger.getLogger(org/openhab/binding/rwesmarthome/internal/lib/api/SmartHomeEntitiesXMLResponse.getName()).log(Level.FINEST, logDev.getDeviceName());
                        logDev.setLocation((SmartHomeLocation)locations.get(logDev.getLocationId()));
                    }
                }

            }
        }
        catch(SAXException ex)
        {
            Logger.getLogger(org/openhab/binding/rwesmarthome/internal/lib/api/LogicalDeviceXMLResponse.getName()).log(Level.SEVERE, null, ex);
        }
        catch(IOException ex)
        {
            Logger.getLogger(org/openhab/binding/rwesmarthome/internal/lib/api/LogicalDeviceXMLResponse.getName()).log(Level.SEVERE, null, ex);
        }
        catch(ParserConfigurationException ex)
        {
            Logger.getLogger(org/openhab/binding/rwesmarthome/internal/lib/api/LogicalDeviceXMLResponse.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public ConcurrentHashMap getTemperatureHumidityDevices()
    {
        return temperatureHumidityDevices;
    }

    private SmartHomeLocation getLocation(Element devEl)
    {
        SmartHomeLocation location = new SmartHomeLocation();
        location.setLocationId(getTextValueFromElements(devEl, "Id"));
        location.setName(getTextValueFromElements(devEl, "Name"));
        location.setPosition(getTextValueFromElements(devEl, "Position"));
        return location;
    }

    private LogicalDevice getLogicalDevice(Element devEl)
    {
        LogicalDevice logicalDevice = null;
        String sType = getTextValueFromAttribute(devEl, "xsi:type");
        if("RoomHumiditySensor".equals(sType))
        {
            RoomHumiditySensor roomHumiditySensor = new RoomHumiditySensor();
            roomHumiditySensor.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            roomHumiditySensor.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            roomHumiditySensor.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            NodeList underlyingDevNodes = devEl.getElementsByTagName("UDvIds");
            if(underlyingDevNodes != null && underlyingDevNodes.getLength() > 0)
            {
                Element el = (Element)underlyingDevNodes.item(0);
                NodeList guidNodes = el.getElementsByTagName("guid");
                if(guidNodes != null && guidNodes.getLength() > 0)
                {
                    for(int i = 0; i <= guidNodes.getLength(); i++)
                        mapRoomsToHumiditySensors.put(roomHumiditySensor.getLocationId(), roomHumiditySensor.getLogicalDeviceId());

                }
            }
            logicalDevice = roomHumiditySensor;
            roomHumiditySensors.put(roomHumiditySensor.getDeviceId(), roomHumiditySensor);
            mapRoomsToHumiditySensors.put(roomHumiditySensor.getLocationId(), roomHumiditySensor.getDeviceId());
            TemperatureHumidityDevice tempHumDev = (TemperatureHumidityDevice)temperatureHumidityDevices.get(roomHumiditySensor.getLocationId());
            logicalDevice.setLocation((SmartHomeLocation)locations.get(logicalDevice.getLocationId()));
            if(tempHumDev == null)
            {
                tempHumDev = new TemperatureHumidityDevice();
                tempHumDev.setLocation(roomHumiditySensor.getLocation());
                temperatureHumidityDevices.put(tempHumDev.getLocationId(), tempHumDev);
            }
            tempHumDev.setRoomHumidtySensor(roomHumiditySensor);
        } else
        if("WindowDoorSensor".equals(sType))
        {
            WindowDoorSensor windowDoorSensor = new WindowDoorSensor();
            windowDoorSensor.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            windowDoorSensor.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            windowDoorSensor.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            windowDoorSensors.put(windowDoorSensor.getDeviceId(), windowDoorSensor);
            logicalDevice = windowDoorSensor;
        } else
        if("MotionDetectionSensor".equals(sType))
        {
            MotionDetectionSensor motionDetectionSensor = new MotionDetectionSensor();
            motionDetectionSensor.setLogicalDeviceType("MotionDetectionSensor");
            motionDetectionSensor.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            motionDetectionSensor.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            motionDetectionSensor.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            baseSensors.put(motionDetectionSensor.getDeviceId(), motionDetectionSensor);
            logicalDevice = motionDetectionSensor;
        } else
        if("LuminanceSensor".equals(sType))
        {
            LuminanceSensor luminanceSensor = new LuminanceSensor();
            luminanceSensor.setLogicalDeviceType("LuminanceSensor");
            luminanceSensor.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            luminanceSensor.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            luminanceSensor.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            baseSensors.put(luminanceSensor.getDeviceId(), luminanceSensor);
            logicalDevice = luminanceSensor;
        } else
        if("Router".equals(sType))
        {
            Router router = new Router();
            router.setLogicalDeviceType("Router");
            router.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            router.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            router.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            router.setBaseDeviceId(getTextValueFromElements(devEl, "BDId"));
            routers.put(router.getDeviceId(), router);
            logicalDevice = router;
        } else
        if("RoomTemperatureActuator".equals(sType))
        {
            RoomTemperatureActuator roomTemperatureActuator = new RoomTemperatureActuator();
            roomTemperatureActuator.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            roomTemperatureActuator.setPointTemperature(Double.valueOf(getDoubleValueFromElements(devEl, "PtTmp")));
            roomTemperatureActuator.setWindowReductionActive(getTextValueFromElements(devEl, "WndRd"));
            roomTemperatureActuator.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            roomTemperatureActuator.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            roomTemperatureActuator.setMaxTemperature(getDoubleValueFromElements(devEl, "MxTp"));
            roomTemperatureActuator.setMinTemperature(getDoubleValueFromElements(devEl, "MnTp"));
            roomTemperatureActuator.setPreheatFactor(Double.valueOf(getDoubleValueFromElements(devEl, "PhFct")));
            roomTemperatureActuator.setIsLocked(Boolean.valueOf(getBooleanValueFromElements(devEl, "Lckd")));
            roomTemperatureActuator.setIsFreezeProtectionActivated(Boolean.valueOf(getBooleanValueFromElements(devEl, "FPrA")));
            roomTemperatureActuator.setFreezeProtection(Double.valueOf(getDoubleValueFromElements(devEl, "FPr")));
            roomTemperatureActuator.setIsMoldProtectionActivated(Boolean.valueOf(getBooleanValueFromElements(devEl, "MPrA")));
            roomTemperatureActuator.setHumidityMoldProtection(Double.valueOf(getDoubleValueFromElements(devEl, "HMPr")));
            roomTemperatureActuator.setWindowsOpenTemperature(Double.valueOf(getDoubleValueFromElements(devEl, "WOpTp")));
            logicalDevice = roomTemperatureActuator;
            mapRoomsToTemperatureActuators.put(roomTemperatureActuator.getLocationId(), roomTemperatureActuator.getDeviceId());
            roomTemperatureActuators.put(roomTemperatureActuator.getDeviceId(), roomTemperatureActuator);
            TemperatureHumidityDevice tempHumDev = (TemperatureHumidityDevice)temperatureHumidityDevices.get(roomTemperatureActuator.getLocationId());
            logicalDevice.setLocation((SmartHomeLocation)locations.get(logicalDevice.getLocationId()));
            if(tempHumDev == null)
            {
                tempHumDev = new TemperatureHumidityDevice();
                tempHumDev.setLocation(roomTemperatureActuator.getLocation());
                temperatureHumidityDevices.put(tempHumDev.getLocationId(), tempHumDev);
            }
            tempHumDev.setTemperatureActuator(roomTemperatureActuator);
        } else
        if("RoomTemperatureSensor".equals(sType))
        {
            RoomTemperatureSensor roomTemperatureSensor = new RoomTemperatureSensor();
            roomTemperatureSensor.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            roomTemperatureSensor.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            roomTemperatureSensor.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            roomTemperatureSensors.put(roomTemperatureSensor.getDeviceId(), roomTemperatureSensor);
            mapRoomsToTemperatureSensors.put(roomTemperatureSensor.getLocationId(), roomTemperatureSensor.getDeviceId());
            logicalDevice = roomTemperatureSensor;
            TemperatureHumidityDevice tempHumDev = (TemperatureHumidityDevice)temperatureHumidityDevices.get(roomTemperatureSensor.getLocationId());
            logicalDevice.setLocation((SmartHomeLocation)locations.get(logicalDevice.getLocationId()));
            if(tempHumDev == null)
            {
                tempHumDev = new TemperatureHumidityDevice();
                tempHumDev.setLocation(roomTemperatureSensor.getLocation());
                temperatureHumidityDevices.put(tempHumDev.getLocationId(), tempHumDev);
            }
            tempHumDev.setTemperatureSensor(roomTemperatureSensor);
        } else
        if("SmokeDetectorSensor".equals(sType))
        {
            SmokeDetectorSensor smokeDetectorSensor = new SmokeDetectorSensor();
            smokeDetectorSensor.setLogicalDeviceType("SmokeDetectorSensor");
            smokeDetectorSensor.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            smokeDetectorSensor.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            smokeDetectorSensor.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            smokeDetectorSensor.setBaseDeviceId(getTextValueFromElements(devEl, "BDId"));
            smokeDetectorSensors.put(smokeDetectorSensor.getDeviceId(), smokeDetectorSensor);
            logicalDevice = smokeDetectorSensor;
        } else
        if("AlarmActuator".equals(sType))
        {
            AlarmActuator alarmActuator = new AlarmActuator();
            alarmActuator.setLogicalDeviceType("AlarmActuator");
            alarmActuator.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            alarmActuator.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            alarmActuator.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            alarmActuator.setBaseDeviceId(getTextValueFromElements(devEl, "BDId"));
            alarmActuator.setActuatorClass(getTextValueFromElements(devEl, "ActCls"));
            alarmActuator.setOn(getBooleanValueFromElements(devEl, "IsOn"));
            alarmActuator.setAlarmDuration(getIntValueFromElements(devEl, "AlarmDuration"));
            alarmActuators.put(alarmActuator.getDeviceId(), alarmActuator);
            logicalDevice = alarmActuator;
        } else
        if("DimmerActuator".equals(sType))
        {
            DimmerActuator dimmerActuator = new DimmerActuator();
            dimmerActuator.setLogicalDeviceType("DimmerActuator");
            dimmerActuator.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            dimmerActuator.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            dimmerActuator.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            dimmerActuator.setBaseDeviceId(getTextValueFromElements(devEl, "BDId"));
            dimmerActuator.setActuatorClass(getTextValueFromElements(devEl, "ActCls"));
            dimmerActuator.setMax(getIntValueFromElements(devEl, "TMxV"));
            dimmerActuator.setMin(getIntValueFromElements(devEl, "TMnV"));
            dimmerActuator.setDimLevel(getIntValueFromElements(devEl, "DmLvl"));
            dimmerActuators.put(dimmerActuator.getDeviceId(), dimmerActuator);
            logicalDevice = dimmerActuator;
        } else
        if("PushButtonSensor".equals(sType))
        {
            PushButtonSensor pushButtonSensor = new PushButtonSensor();
            pushButtonSensor.setLogicalDeviceType("PushButtonSensor");
            pushButtonSensor.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            pushButtonSensor.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            pushButtonSensor.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            pushButtonSensor.setBaseDeviceId(getTextValueFromElements(devEl, "BDId"));
            pushButtonSensor.setButtonCount(getIntValueFromElements(devEl, "ButtonCount"));
            pushButtonSensors.put(pushButtonSensor.getDeviceId(), pushButtonSensor);
            logicalDevice = pushButtonSensor;
        } else
        if("RollerShutterActuator".equals(sType))
        {
            RollerShutterActuator rollerShutterActuator = new RollerShutterActuator();
            rollerShutterActuator.setLogicalDeviceType("RollerShutterActuator");
            rollerShutterActuator.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            rollerShutterActuator.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            rollerShutterActuator.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            rollerShutterActuator.setBaseDeviceId(getTextValueFromElements(devEl, "BDId"));
            rollerShutterActuator.setActuatorClass(getTextValueFromElements(devEl, "ActCls"));
            rollerShutterActuator.setOnLvl(getIntValueFromElements(devEl, "OnLvl"));
            rollerShutterActuator.setOffLvl(getIntValueFromElements(devEl, "OffLvl"));
            rollerShutterActuator.setShDT(getTextValueFromElements(devEl, "ShDT"));
            rollerShutterActuator.setSCBh(getTextValueFromElements(devEl, "SCBh"));
            rollerShutterActuator.setTmFU(getTextValueFromElements(devEl, "TmFU"));
            rollerShutterActuator.setTmFD(getTextValueFromElements(devEl, "TmFD"));
            rollerShutterActuator.setIsCalibrating(getBooleanValueFromElements(devEl, "IsCalibrating"));
            rollerShutterActuators.put(rollerShutterActuator.getDeviceId(), rollerShutterActuator);
            logicalDevice = rollerShutterActuator;
        } else
        if("SwitchActuator".equals(sType))
        {
            SwitchActuator switchActuator = new SwitchActuator();
            switchActuator.setLogicalDeviceType("SwitchActuator");
            switchActuator.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            switchActuator.getDefaultOffSettings().setIsOn(Boolean.valueOf(getBooleanValueFromElements(devEl, "IsOn")));
            switchActuator.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            switchActuator.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            switchActuator.setBaseDeviceId(getTextValueFromElements(devEl, "BDId"));
            switchActuator.setActuatorClass(getTextValueFromElements(devEl, "ActCls"));
            switchActuators.put(switchActuator.getDeviceId(), switchActuator);
            logicalDevice = switchActuator;
        } else
        if("GenericActuator".equals(sType))
        {
            NodeList nodes = devEl.getElementsByTagName("Ppt");
            if(nodes.getLength() != 1)
            {
                HashMap cache = new HashMap();
                for(int i = 0; i < nodes.getLength(); i++)
                {
                    String name = getTextValueFromAttribute((Element)nodes.item(i), "Name");
                    String value = getTextValueFromAttribute((Element)nodes.item(i), "Value");
                    cache.put(name, value);
                }

                if(cache.containsKey("EmailPeriod"))
                {
                    EmailActuator emailActuator = new EmailActuator();
                    emailActuator.setLogicalDeviceType("EMailActuator");
                    emailActuator.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
                    emailActuator.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
                    emailActuator.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
                    emailActuator.setBaseDeviceId(getTextValueFromElements(devEl, "BDId"));
                    emailActuator.setActuatorClass(getTextValueFromElements(devEl, "ActCls"));
                    emailActuator.setEmailMaxPeriod((String)cache.get("EmailMaxPeriod"));
                    emailActuator.setEmailPeriod((String)cache.get("EmailPeriod"));
                    emailActuator.setEmailMessage("EmailMessage");
                    for(int i = 0; cache.containsKey((new StringBuilder("EmailName_")).append(i).toString()); i++)
                        emailActuator.addUser((String)cache.get((new StringBuilder("EmailName_")).append(i).toString()), (String)cache.get((new StringBuilder("EmailAddress_")).append(i).toString()));

                    baseActuators.put(emailActuator.getDeviceId(), emailActuator);
                    logicalDevice = emailActuator;
                }
                if(cache.containsKey("SMSPeriod"))
                {
                    SmsActuator smsActuator = new SmsActuator();
                    smsActuator.setLogicalDeviceType("SMSActuator");
                    smsActuator.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
                    smsActuator.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
                    smsActuator.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
                    smsActuator.setBaseDeviceId(getTextValueFromElements(devEl, "BDId"));
                    smsActuator.setActuatorClass(getTextValueFromElements(devEl, "ActCls"));
                    smsActuator.setSmsMaxPeriod((String)cache.get("SMSMaxPeriod"));
                    smsActuator.setSmsPeriod((String)cache.get("SMSPeriod"));
                    smsActuator.setSmsMessage("SMSMessage");
                    for(int i = 0; cache.containsKey((new StringBuilder("SMSName_")).append(i).toString()); i++)
                        smsActuator.addUser((String)cache.get((new StringBuilder("SMSName_")).append(i).toString()), (String)cache.get((new StringBuilder("SMSPhoneNumber_")).append(i).toString()));

                    baseActuators.put(smsActuator.getDeviceId(), smsActuator);
                    logicalDevice = smsActuator;
                }
                cache.clear();
                return logicalDevice;
            }
            GenericActuator genericActuator = new GenericActuator();
            genericActuator.setLogicalDeviceType("GenericActuator");
            genericActuator.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            genericActuator.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            logger.debug("GenericActuator {}", getTextValueFromAttribute(devEl, "Name"));
            genericActuator.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            genericActuator.setBaseDeviceId(getTextValueFromElements(devEl, "BDId"));
            genericActuator.setActuatorClass(getTextValueFromElements(devEl, "ActCls"));
            baseActuators.put(genericActuator.getDeviceId(), genericActuator);
            logicalDevice = genericActuator;
        } else
        if("GenericSensor".equals(sType))
        {
            NodeList nodes = devEl.getElementsByTagName("Ppt");
            if(nodes.getLength() != 1)
            {
                HashMap cache = new HashMap();
                for(int i = 0; i < nodes.getLength(); i++)
                {
                    String name = getTextValueFromAttribute((Element)nodes.item(i), "Name");
                    String value = getTextValueFromAttribute((Element)nodes.item(i), "Value");
                    cache.put(name, value);
                }

                if(cache.containsKey("Latitude"))
                {
                    DaySensor dayActuator = new DaySensor();
                    dayActuator.setLogicalDeviceType("DaySensor");
                    dayActuator.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
                    dayActuator.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
                    dayActuator.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
                    dayActuator.setBaseDeviceId(getTextValueFromElements(devEl, "BDId"));
                    dayActuator.setLatitude((String)cache.get("Latitude"));
                    dayActuator.setLongitude((String)cache.get("Longitude"));
                    baseSensors.put(dayActuator.getDeviceId(), dayActuator);
                }
                cache.clear();
                return logicalDevice;
            }
            GenericSensor genericSensor = new GenericSensor();
            genericSensor.setLogicalDeviceType("GenericSensor");
            genericSensor.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
            genericSensor.setDeviceName(getTextValueFromAttribute(devEl, "Name"));
            genericSensor.setLocationId(getTextValueFromAttribute(devEl, "LCID"));
            genericSensor.setBaseDeviceId(getTextValueFromElements(devEl, "BDId"));
            baseSensors.put(genericSensor.getDeviceId(), genericSensor);
            logicalDevice = genericSensor;
        } else
        {
            logicalDevice = new LogicalDevice();
            logicalDevice.setLogicalDeviceType("Generic");
            if(!sType.contains("Sensor") && !sType.contains("Actuator"))
                Logger.getLogger(org/openhab/binding/rwesmarthome/internal/lib/api/SmartHomeEntitiesXMLResponse.getName()).log(Level.INFO, (new StringBuilder("-2-----------new/unknown logical device: ")).append(sType).toString());
            logicalDevice.setLogicalDeviceId(getTextValueFromElements(devEl, "Id"));
        }
        return logicalDevice;
    }

    public String getResponseStatus()
    {
        return responseStatus;
    }

    public ConcurrentHashMap getRoomTemperatureSensors()
    {
        return roomTemperatureSensors;
    }

    public ConcurrentHashMap getSmokeDetectorSensors()
    {
        return smokeDetectorSensors;
    }

    public ConcurrentHashMap getAlarmActuators()
    {
        return alarmActuators;
    }

    public ConcurrentHashMap getPushButtonSensors()
    {
        return pushButtonSensors;
    }

    public ConcurrentHashMap getRoomHumiditySensors()
    {
        return roomHumiditySensors;
    }

    public ConcurrentHashMap getMapRoomsToTemperatureActuators()
    {
        return mapRoomsToTemperatureActuators;
    }

    public ConcurrentHashMap getMapRoomsToTemperatureSensors()
    {
        return mapRoomsToTemperatureSensors;
    }

    public ConcurrentHashMap getMapRoomsToHumiditySensors()
    {
        return mapRoomsToHumiditySensors;
    }

    public ConcurrentHashMap getRoomTemperatureActuators()
    {
        return roomTemperatureActuators;
    }

    public ConcurrentHashMap getBaseActuators()
    {
        return baseActuators;
    }

    public ConcurrentHashMap getBaseSensors()
    {
        return baseSensors;
    }

    public ConcurrentHashMap getWindowDoorSensors()
    {
        return windowDoorSensors;
    }

    public ConcurrentHashMap getRouters()
    {
        return routers;
    }

    public ConcurrentHashMap getRollerShutterActuators()
    {
        return rollerShutterActuators;
    }

    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(org/openhab/binding/rwesmarthome/internal/lib/api/SmartHomeEntitiesXMLResponse);
    private String responseStatus;
    private ConcurrentHashMap locations;
    private ConcurrentHashMap pushButtonSensors;
    private ConcurrentHashMap routers;
    private ConcurrentHashMap switchActuators;
    private ConcurrentHashMap dimmerActuators;
    private ConcurrentHashMap rollerShutterActuators;
    private ConcurrentHashMap alarmActuators;
    private ConcurrentHashMap baseActuators;
    private ConcurrentHashMap baseSensors;
    private ConcurrentHashMap roomTemperatureSensors;
    private ConcurrentHashMap smokeDetectorSensors;
    private ConcurrentHashMap roomHumiditySensors;
    private ConcurrentHashMap roomTemperatureActuators;
    private ConcurrentHashMap temperatureHumidityDevices;
    private ConcurrentHashMap windowDoorSensors;
    private ConcurrentHashMap mapRoomsToTemperatureActuators;
    private ConcurrentHashMap mapRoomsToTemperatureSensors;
    private ConcurrentHashMap mapRoomsToHumiditySensors;

}